environment:
  VERSION_MINOR: 3.0.0
  VERSION_BUILD: $(VERSION_MINOR).$(APPVEYOR_BUILD_NUMBER)

version: $(VERSION_MINOR).{build}

pull_requests:
  do_not_increment_build_number: true

branches:
  only:
  - dev
  - master

skip_commits:
  files:
    - '**/.git*'
    - '**/*.MD'

image: Visual Studio 2022
configuration: Release

init:
- cmd: git config --global core.autocrlf true

install:
- cmd: choco install codecov --no-progress

dotnet_csproj:
  patch: true
  file: '**\*.csproj'
  assembly_version: '$(VERSION_BUILD)'
  file_version: '$(VERSION_BUILD)'
  informational_version: '$(VERSION_BUILD)'

before_build:
- cmd: dotnet restore

build_script:
- cmd: dotnet build ./src/ArgSentry/ArgSentry.csproj --configuration Release --no-restore

test_script:
- cmd: dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover ./test/ArgSentry.Test/ArgSentry.Test.csproj --logger AppVeyor
- cmd: codecov -f "./test/ArgSentry.Test/coverage.opencover.xml"

after_test:
- ps: >-
    $branch = $env:APPVEYOR_REPO_BRANCH;
    if ($branch -eq 'dev') {
      $suffix = "beta" + ([int]$env:APPVEYOR_BUILD_NUMBER).ToString("0000");
      dotnet pack ./src/ArgSentry/ArgSentry.csproj --configuration Release --no-build --no-restore --output dist /p:VersionPrefix=$env:VERSION_MINOR --version-suffix $suffix
    } elseif ($branch -eq 'master') {
      dotnet pack ./src/ArgSentry/ArgSentry.csproj --configuration Release --no-build --no-restore --output dist /p:VersionPrefix=$env:VERSION_MINOR
    }

artifacts:
- path: '**\*.nupkg'

deploy:
- provider: NuGet
  api_key:
    secure: NRcCXZyQD08WgXPxj5i4Gmt2UR6Ug4/SH7FTwtVPsfNp76rgthe/HwSRSb1L1XY/
  skip_symbols: true
  on:
    branch: dev

- provider: NuGet
  api_key:
    secure: NRcCXZyQD08WgXPxj5i4Gmt2UR6Ug4/SH7FTwtVPsfNp76rgthe/HwSRSb1L1XY/
  skip_symbols: true
  on:
    branch: master
